import { Project, Node } from "ts-morph";
import path, { resolve } from "path";
import fsExtra from "fs-extra";
import { fileURLToPath } from "url";

const __dirname = path.dirname(fileURLToPath(import.meta.url));

export function toScreamingSnakeCase(value: string): string {
  return (
    value
      // 1) Insert an underscore between consecutive uppercase letters followed by an uppercase-lowercase pair
      //    (e.g. HTTPRequest -> HTTP_Request).
      .replace(/([A-Z]+)([A-Z][a-z])/g, "$1_$2")
      // 2) Insert an underscore between a lower/digit and an uppercase letter
      //    (e.g. camelCase -> camel_Case, HTTP_Request -> HTTP_Request stays the same).
      .replace(/([a-z0-9])([A-Z])/g, "$1_$2")
      // Convert everything to uppercase.
      .toUpperCase()
  );
}

export function generateTypes() {
  const namespacesToExtract = ["std", "$default"];

  const project = new Project({
    tsConfigFilePath: resolve(__dirname, "..", "tsconfig.json"),
  });

  // Load interfaces.ts generated by EdgeDB and extract interface 'types'
  const interfacesPath = resolve(
    __dirname,
    "./../dbschema/types/interfaces.ts"
  );
  const interfacesFile = project.addSourceFileAtPath(interfacesPath);

  const namespaces = namespacesToExtract.map((namespace) =>
    interfacesFile.getModuleOrThrow(namespace)
  );

  const statements = namespaces.flatMap((namespace) =>
    namespace.getStatements()
  );

  const outputLines: string[] = [
    "import { Enum } from './helper'",
    "import { db } from '~/edgedb'",
    "",
  ];

  for (const statement of statements) {
    let statementText = statement.getText();
    if (statementText.includes("namespace")) continue;

    if (!Node.isTypeAliasDeclaration(statement)) continue;

    const isStringUnion =
      statement.getType().isUnion() &&
      statement
        .getType()
        .getUnionTypes()
        .every((u) => u.isStringLiteral());

    if (isStringUnion) {
      outputLines.push(
        `export const ${statement.getName()}Values = db['${statement.getName()}'].__values__`
      );
      outputLines.push(
        `export const ${toScreamingSnakeCase(
          statement.getName()
        )} = Enum(db['${statement.getName()}'])`
      );
    }
  }

  const outFile = resolve(__dirname, "./../dbschema/types/generated.ts");
  fsExtra.writeFileSync(outFile, outputLines.join("\n"), "utf-8");
  console.log(`\nDone! Wrote ${outFile}\n`);
}
